#!/bin/sh

setup() {
	. ./lib/test-helper.sh
	mock_path bin
	P=./../
}

test_remove_extension() {
	source_exec ${P}imagemagick-imslp.sh
	assert_equals "$(_remove_extension filename.png)" "filename"
	assert_equals "$(_remove_extension filename.png.png)" "filename.png"
}

test_get_channels_input() {
	source_exec ${P}imagemagick-imslp.sh
	local TMP=$(mktemp)
	fake identify 'echo $FAKE_PARAMS > $TMP'
	_get_channels filename.png
	assert_equals filename.png "$(head -n1 $TMP)"
	rm -f "$TMP"
}

test_get_channels_output() {
	source_exec ${P}imagemagick-imslp.sh
	fake identify << EOF
TFKBexample-2.png PNG 4868x2623 4868x2623+0+0 8-bit sRGB 2c 104KB 0.000u 0:00.000
EOF

	assert_equals "$(_get_channels filename.png)" 2c
}

test_defaults() {
	source_exec ${P}imagemagick-imslp.sh
	assert_equals "$OUT_EXT" png
}

test_options() {
	source_exec ${P}imagemagick-imslp.sh
	OPT_THRESHOLD=50%
	assert_equals "$(_options)" '-deskew 40% -threshold 50% -trim +repage'
}

test_options_c_compression() {
	source_exec ${P}imagemagick-imslp.sh
	OPT_THRESHOLD=50%
	OPT_COMPRESSION=1
	assert_equals "$(_options)" '-deskew 40% -threshold 50% -trim +repage -compress Group4 -monochrome'
}

test_options_r_resize() {
	source_exec ${P}imagemagick-imslp.sh
	OPT_THRESHOLD=50%
	OPT_RESIZE=1
	assert_equals "$(_options)" '-resize 200% -deskew 40% -threshold 50% -trim +repage'
}

##
# function _getopts
##

test_getopts_without() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts
	assert_equals "$OPT_BACKUP" ''
	assert_equals "$OPT_COMPRESSION" ''
	assert_equals "$OPT_FORCE" ''
	assert_equals "$OPT_JOIN" ''
	assert_equals "$OPT_RESIZE" ''
	assert_equals "$OPT_THRESHOLD" 50%
}

test_getopts_only_file() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts pic.jpg
	assert_equals "$OPT_BACKUP" ''
	assert_equals "$OPT_COMPRESSION" ''
	assert_equals "$OPT_FORCE" ''
	assert_equals "$OPT_JOIN" ''
	assert_equals "$OPT_RESIZE" ''
	assert_equals "$OPT_THRESHOLD" 50%
	assert_equals "$IMAGES" pic.jpg
}

test_getopts_multiple_files() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts pic1.jpg pic2.jpg pic3.jpg
	assert_equals "$IMAGES" 'pic1.jpg pic2.jpg pic3.jpg'
}

# backup
test_getopts_b() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -b
	assert_equals "$OPT_BACKUP" 1
}

test_getopts_backup() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --backup
	assert_equals "$OPT_BACKUP" 1
}

# compression
test_getopts_c() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -c
	assert_equals "$OPT_COMPRESSION" 1
}

test_getopts_compression() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --compression
	assert_equals "$OPT_COMPRESSION" 1
}

# force
test_getopts_f() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -f
	assert_equals "$OPT_FORCE" 1
}

test_getopts_force() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --force
	assert_equals "$OPT_FORCE" 1
}

# join
test_getopts_j() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -j
	assert_equals "$OPT_JOIN" 1
}

test_getopts_join() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --join
	assert_equals "$OPT_JOIN" 1
}

# resize
test_getopts_r() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -r
	assert_equals "$OPT_RESIZE" 1
}

test_getopts_resize() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --resize
	assert_equals "$OPT_RESIZE" 1
}

# threshold
test_getopts_t() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts -t 10%
	assert_equals "$OPT_THRESHOLD" 10%
}

test_getopts_threshold() {
	source_exec ${P}imagemagick-imslp.sh
	_getopts --threshold=11%
	assert_equals "$OPT_THRESHOLD" 11%
}
